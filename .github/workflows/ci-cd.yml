name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_PREFIX: libreria-microservicios

jobs:
  # Job 1: Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, product-service, invoice-service, chat-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: microservices/${{ matrix.service }}/package-lock.json

    - name: Install dependencies
      run: |
        cd microservices/${{ matrix.service }}
        npm ci

    - name: Run linter
      run: |
        cd microservices/${{ matrix.service }}
        npm run lint

    - name: Run tests
      run: |
        cd microservices/${{ matrix.service }}
        npm test

    - name: Run type check
      run: |
        cd microservices/${{ matrix.service }}
        npx tsc --noEmit

  # Job 2: Frontend Testing
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linter
      run: |
        cd frontend
        npm run lint

    - name: Run type check
      run: |
        cd frontend
        npm run type-check

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Job 3: Security Scan
  security:
    runs-on: ubuntu-latest
    needs: [test, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit - Auth Service
      run: |
        cd microservices/auth-service
        npm audit --audit-level high

    - name: Run security audit - Frontend
      run: |
        cd frontend
        npm audit --audit-level high

  # Job 4: Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, test-frontend, security]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [auth-service, product-service, invoice-service, chat-service, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service == 'frontend' && './frontend' || format('./microservices/{0}', matrix.service) }}
        file: ${{ matrix.service == 'frontend' && './frontend/Dockerfile' || format('./microservices/{0}/Dockerfile', matrix.service) }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 5: Deploy to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Development Environment
      run: |
        echo "Deploying to development environment..."
        # Aquí iría la lógica de deployment a development
        # Por ejemplo: kubectl, docker-compose, AWS ECS, etc.
        
    - name: Run Health Checks
      run: |
        echo "Running health checks..."
        # Verificar que los servicios estén corriendo correctamente

  # Job 6: Deploy to Production
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production Environment
      run: |
        echo "Deploying to production environment..."
        # Aquí iría la lógica de deployment a production
        
    - name: Run Health Checks
      run: |
        echo "Running production health checks..."
        
    - name: Notify deployment success
      run: |
        echo "Production deployment completed successfully!"

  # Job 7: Performance Testing (solo en main)
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-prod
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Performance Tests
      run: |
        echo "Running performance tests..."
        # Aquí se ejecutarían tests de performance
        # Por ejemplo: k6, Artillery, JMeter, etc.

  # Job 8: Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        echo "Cleaning up old Docker images..."
        # Lógica para limpiar imágenes antigas del registry
